name: Build and Deploy API

on:
  push:
    branches: [ main ]
    paths:
      - "src/api/**"
  workflow_dispatch:

jobs:
  build-tag-push:
    name: Build, Tag, Push to Artifactory
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Log In to Docker
        run: |
          docker login ${{ secrets.ARTIFACTORY_URL }} -u ${{ secrets.ARTIFACTORY_USERNAME }} -p ${{ secrets.ARTIFACTORY_PASSWORD }}

      - name: Copy env.template
        run: |
          cp .env.template .env
      
      - name: Build API Image
        run: |
          docker-compose build wf-api

      - name: List Docker Images
        run: |
          docker images
        
      - name: Tag Image
        run: |
          docker tag citz-imb-wayfinder_wf-api ${{ secrets.ARTIFACTORY_URL }}/${{ secrets.IMAGE_REPOSITORY }}/wf-api:latest
      
      - name: Push Image
        run: |
          docker push ${{ secrets.ARTIFACTORY_URL }}/${{ secrets.IMAGE_REPOSITORY }}/wf-api:latest
    
  deploy:
    name: Deploy to OpenShift
    runs-on: ubuntu-latest
    needs: [ build-tag-push ]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Login to Openshift
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_USER: github-actions
          OPENSHIFT_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE }}
        with: 
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_PASSWORD }}
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}

      - name: Deploy from DeploymentConfig
        env:
          OPENSHIFT_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE }}
          APPLICATION_NAME: wf-api
          DEPLOYMENT_CONFIG: wf-api-dc-template.yaml
          IMAGE_REPOSITORY: ${{ secrets.IMAGE_REPOSITORY }}
          ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
        run: |
          ./.github/helpers/deploy.sh


  healthcheck:
    name: Determine Rollout Success
    runs-on: ubuntu-latest
    needs: [ deploy ]
    steps:
      - name: Login to Openshift
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_USER: github-actions
          OPENSHIFT_PROJECT: ${{ secrets.OPENSHIFT_NAMESPACE }}
        with: 
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_PASSWORD }}
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}
      
      - name: Check Status of Rollout
        run: |
          oc rollout status -n ${{ secrets.OPENSHIFT_NAMESPACE }} dc/wf-api --watch


  cleanup:
    name: Clean Up Old Objects (namely pods and replication controllers)
    runs-on: ubuntu-latest
    needs: [ healthcheck ]
    steps:
      - name: Login to Openshift
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_USER: github-actions
          OPENSHIFT_PROJECT: ${{ secrets.OPENSHIFT_NAMESPACE }}
        with: 
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_PASSWORD }}
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}

      - name: Remove old pod objects
        run: |
          oc delete pod --namespace=${{ secrets.OPENSHIFT_NAMESPACE }} --field-selector status.phase=Succeeded

      - name: Remove old replication controllers
        run: |
          oc delete rc --namespace=${{ secrets.OPENSHIFT_NAMESPACE }} --field-selector status.replicas=0
  
  Success-Notify:
    runs-on: ubuntu-latest
    needs: [ cleanup ]
    steps: 
      - name: Message Teams Channel on Success
        run: |
          curl --location --request POST ${{ secrets.TEAMS_SUCCESS_URL }} \
          --header 'Content-Type: text/plain' \
          --data-raw '{
            "@context": "https://schema.org/extensions",
            "@type": "MessageCard",
            "themeColor": "0072C6",
            "title": "SUCCESS! API Deployment to WF DEV Environment has finished.",
            "text": "The WF API has been built and deployed to the DEV environment. \n\n The logs for the successful deployment can be found [here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n",
          }'

  Failure-Notify:
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Message Teams Channel on Failure
        run: |
          curl --location --request POST ${{ secrets.TEAMS_FAILURE_URL }} \
          --header 'Content-Type: text/plain' \
          --data-raw '{
            "@context": "https://schema.org/extensions",
            "@type": "MessageCard",
            "themeColor": "0072C6",
            "title": "FAILURE! API Deployment to the WF DEV Environment has failed.",
            "text": "The WF API has NOT been built and deployed to the ${{ secrets.LICENSE_PLATE }} DEV environment.\n\n Please review the Github Action for this deployment (here)[${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}].",
          }'
